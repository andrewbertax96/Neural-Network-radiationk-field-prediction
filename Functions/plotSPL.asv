function plotSPL(resultPath, type, meanPlots)
    
    % Define the base SPL directory
    SPLdir = fullfile(resultPath, 'SPL(dB)');

    % Initialize the variables
    csvFiles = [];
    plotsDir = [];

    % Use switch-case for better readability and scalability
    switch type
        case 'fibonacci'
            % Define directories
            SPL_Fibdir = fullfile(SPLdir, 'Fibonacci', 'csv');
            plotsDir = fullfile(SPLdir, 'Fibonacci', 'plots');
            % Get the list of CSV files in the directory, sorted by simulation number
            csvFiles = dir(fullfile(SPL_Fibdir, 'ampsFib_sim*.csv'));

        case 'meridian'
            % Define directories
            SPL_Merdir = fullfile(SPLdir, 'Meridian', 'csv');
            plotsDir = fullfile(SPLdir, 'Meridian', 'plots');
            % Get the list of CSV files in the directory, sorted by simulation number
            csvFiles = dir(fullfile(SPL_Merdir, 'ampsMer_sim*.csv'));
            
        otherwise
            error('Invalid type. Please use either "fibonacci" or "meridian".');
    end

    % Ensure csvFiles are sorted numerically
    csvFiles = sortFilesNumerically(csvFiles, 2);

    % Define directory for eigenfrequencies
    eigenFreqDir = fullfile(resultPath, 'eigenfrequencies', 'csv');
    
    % Read inputs file (not needed for frequencies but kept for reference)
    % inputsFile = readtable(fullfile(fullfile(resultPath, 'inputs', 'csv'), 'inputs.csv'));
    
    % Read eigenfrequencies
    [eigenFrequencies, ~] = readEigenFreq(eigenFreqDir, []); % Pass empty [] for inputsFile as it's not needed

    % Create plots directory if it doesn't exist
    % if ~exist(plotsDir, 'dir')
    %     mkdir(plotsDir);
    % end
    
    % Loop through each CSV file
    for i = 1:min(1, length(csvFiles)) % Limita a una sola iterazione (prima simulazione)
    % for i = 1:length(csvFiles)
        % Load the data from the CSV file
        csvFilePath = fullfile(csvFiles(i).folder, csvFiles(i).name);
        dataTable = readtable(csvFilePath);
        % disp(dataTable);
        
        % Extract the SPL data
        data = table2array(dataTable(:, 2:end));
        
        % Generate filenames for the plots
        [~, baseFileName, ~] = fileparts(csvFiles(i).name);
        plotFileName = sprintf('Matrix_Plot_SPL_values_%s.png', baseFileName);

        % Plot and save the heatmap for original data
        if strcmp(type, 'fibonacci')
            plotAndSaveHeatmap(data, frequencies, plotsDir, plotFileName, ...
                sprintf('Matrixplot of Fibonacci Points Distribution (%s)', baseFileName), ...
                'Frequency (Hz)');
        else
            % Define custom meridian labels
            meridian_labels = {'NorthPole', 'M1.1', 'M1.2', 'M1.3', 'M1.4', 'M1.5', 'M1.6', ...
                'M2.1', 'M2.2', 'M2.3', 'M2.4', 'M2.5', 'M2.6', ...
                'M3.1', 'M3.2', 'M3.3', 'M3.4', 'M3.5', 'M3.6', ...
                'M4.1', 'M4.2', 'M4.3', 'M4.4', 'M4.5', 'M4.6', ...
                'M5.1', 'M5.2', 'M5.3', 'M5.4', 'M5.5', 'M5.6', ...
                'M6.1', 'M6.2', 'M6.3', 'M6.4', 'M6.5', 'M6.6', ...
                'M7.1', 'M7.2', 'M7.3', 'M7.4', 'M7.5', 'M7.6', ...
                'M8.1', 'M8.2', 'M8.3', 'M8.4', 'M8.5', 'M8.6', ...
                'M9.1', 'M9.2', 'M9.3', 'M9.4', 'M9.5', 'M9.6', ...
                'M10.1', 'M10.2', 'M10.3', 'M10.4', 'M10.5', 'M10.6', ...
                'SouthPole'};
            plotAndSaveHeatmap(data, frequencies, plotsDir, plotFileName, ...
                sprintf('Matrixplot of Meridian Points Distribution (%s)', baseFileName), ...
                'Frequency (Hz)', meridian_labels);
        end

        % Plot and save the heatmap for mean-subtracted data (if applicable)
        if meanPlots
            % Subtract the mean from each row
            data_mean_subtracted = data - mean(data, 2);

            % Generate filename for mean-subtracted plot
            plotMeanSubFileName = sprintf('Matrix_Plot_SPL_values_%s_Mean_Subtracted.png', baseFileName);
            
            if strcmp(type, 'fibonacci')
                plotAndSaveHeatmap(data_mean_subtracted, frequencies, plotsDir, plotMeanSubFileName, ...
                    sprintf('Matrixplot of Fibonacci Points Distribution (Mean Subtracted) (%s)', baseFileName), ...
                    'Frequency (Hz)');
            else
                plotAndSaveHeatmap(data_mean_subtracted, frequencies, plotsDir, plotMeanSubFileName, ...
                    sprintf('Matrixplot of Meridian Points Distribution (Mean Subtracted) (%s)', baseFileName), ...
                    'Frequency (Hz)', meridian_labels);
            end
        end
    end
end
